// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddBytes mocks base method.
func (m *MockStorage) AddBytes(ctx context.Context, id primitive.ObjectID, binaryData BinaryData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBytes", ctx, id, binaryData)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBytes indicates an expected call of AddBytes.
func (mr *MockStorageMockRecorder) AddBytes(ctx, id, binaryData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBytes", reflect.TypeOf((*MockStorage)(nil).AddBytes), ctx, id, binaryData)
}

// AddCard mocks base method.
func (m *MockStorage) AddCard(ctx context.Context, id primitive.ObjectID, card CardData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCard", ctx, id, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCard indicates an expected call of AddCard.
func (mr *MockStorageMockRecorder) AddCard(ctx, id, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockStorage)(nil).AddCard), ctx, id, card)
}

// AddNote mocks base method.
func (m *MockStorage) AddNote(ctx context.Context, id primitive.ObjectID, note Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNote", ctx, id, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNote indicates an expected call of AddNote.
func (mr *MockStorageMockRecorder) AddNote(ctx, id, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNote", reflect.TypeOf((*MockStorage)(nil).AddNote), ctx, id, note)
}

// AddPassword mocks base method.
func (m *MockStorage) AddPassword(ctx context.Context, id primitive.ObjectID, data PasswordData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPassword", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPassword indicates an expected call of AddPassword.
func (mr *MockStorageMockRecorder) AddPassword(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPassword", reflect.TypeOf((*MockStorage)(nil).AddPassword), ctx, id, data)
}

// AddUser mocks base method.
func (m *MockStorage) AddUser(ctx context.Context, user User) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorageMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorage)(nil).AddUser), ctx, user)
}

// Close mocks base method.
func (m *MockStorage) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close), ctx)
}

// GetBytes mocks base method.
func (m *MockStorage) GetBytes(ctx context.Context, id primitive.ObjectID, binaryName string) (BinaryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes", ctx, id, binaryName)
	ret0, _ := ret[0].(BinaryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockStorageMockRecorder) GetBytes(ctx, id, binaryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockStorage)(nil).GetBytes), ctx, id, binaryName)
}

// GetCard mocks base method.
func (m *MockStorage) GetCard(ctx context.Context, id primitive.ObjectID, cardName string) (CardData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", ctx, id, cardName)
	ret0, _ := ret[0].(CardData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockStorageMockRecorder) GetCard(ctx, id, cardName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockStorage)(nil).GetCard), ctx, id, cardName)
}

// GetNote mocks base method.
func (m *MockStorage) GetNote(ctx context.Context, id primitive.ObjectID, noteName string) (Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", ctx, id, noteName)
	ret0, _ := ret[0].(Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockStorageMockRecorder) GetNote(ctx, id, noteName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockStorage)(nil).GetNote), ctx, id, noteName)
}

// GetPassword mocks base method.
func (m *MockStorage) GetPassword(ctx context.Context, id primitive.ObjectID, serviceTitle string) (PasswordData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", ctx, id, serviceTitle)
	ret0, _ := ret[0].(PasswordData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockStorageMockRecorder) GetPassword(ctx, id, serviceTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockStorage)(nil).GetPassword), ctx, id, serviceTitle)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(ctx context.Context, login string) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), ctx, login)
}

// IsLoginEnabled mocks base method.
func (m *MockStorage) IsLoginEnabled(ctx context.Context, login string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoginEnabled", ctx, login)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoginEnabled indicates an expected call of IsLoginEnabled.
func (mr *MockStorageMockRecorder) IsLoginEnabled(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoginEnabled", reflect.TypeOf((*MockStorage)(nil).IsLoginEnabled), ctx, login)
}
