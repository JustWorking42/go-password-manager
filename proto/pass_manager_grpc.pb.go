// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: pass_manager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PassManager_Register_FullMethodName    = "/proto.PassManager/Register"
	PassManager_Login_FullMethodName       = "/proto.PassManager/Login"
	PassManager_AddPassword_FullMethodName = "/proto.PassManager/AddPassword"
	PassManager_GetPassword_FullMethodName = "/proto.PassManager/GetPassword"
	PassManager_AddCard_FullMethodName     = "/proto.PassManager/AddCard"
	PassManager_GetCard_FullMethodName     = "/proto.PassManager/GetCard"
	PassManager_AddNote_FullMethodName     = "/proto.PassManager/AddNote"
	PassManager_GetNote_FullMethodName     = "/proto.PassManager/GetNote"
	PassManager_AddBytes_FullMethodName    = "/proto.PassManager/AddBytes"
	PassManager_GetBytes_FullMethodName    = "/proto.PassManager/GetBytes"
)

// PassManagerClient is the client API for PassManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassManagerClient interface {
	Register(ctx context.Context, in *Creds, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Login(ctx context.Context, in *Creds, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddPassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPassword(ctx context.Context, in *GetPasswordRequest, opts ...grpc.CallOption) (*Password, error)
	AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*Card, error)
	AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error)
	AddBytes(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBytes(ctx context.Context, in *GetBytesRequest, opts ...grpc.CallOption) (*Bytes, error)
}

type passManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPassManagerClient(cc grpc.ClientConnInterface) PassManagerClient {
	return &passManagerClient{cc}
}

func (c *passManagerClient) Register(ctx context.Context, in *Creds, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PassManager_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerClient) Login(ctx context.Context, in *Creds, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PassManager_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerClient) AddPassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PassManager_AddPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerClient) GetPassword(ctx context.Context, in *GetPasswordRequest, opts ...grpc.CallOption) (*Password, error) {
	out := new(Password)
	err := c.cc.Invoke(ctx, PassManager_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerClient) AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PassManager_AddCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerClient) GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*Card, error) {
	out := new(Card)
	err := c.cc.Invoke(ctx, PassManager_GetCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerClient) AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PassManager_AddNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerClient) GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, PassManager_GetNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerClient) AddBytes(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PassManager_AddBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passManagerClient) GetBytes(ctx context.Context, in *GetBytesRequest, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, PassManager_GetBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassManagerServer is the server API for PassManager service.
// All implementations must embed UnimplementedPassManagerServer
// for forward compatibility
type PassManagerServer interface {
	Register(context.Context, *Creds) (*emptypb.Empty, error)
	Login(context.Context, *Creds) (*emptypb.Empty, error)
	AddPassword(context.Context, *Password) (*emptypb.Empty, error)
	GetPassword(context.Context, *GetPasswordRequest) (*Password, error)
	AddCard(context.Context, *Card) (*emptypb.Empty, error)
	GetCard(context.Context, *GetCardRequest) (*Card, error)
	AddNote(context.Context, *Note) (*emptypb.Empty, error)
	GetNote(context.Context, *GetNoteRequest) (*Note, error)
	AddBytes(context.Context, *Bytes) (*emptypb.Empty, error)
	GetBytes(context.Context, *GetBytesRequest) (*Bytes, error)
	mustEmbedUnimplementedPassManagerServer()
}

// UnimplementedPassManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPassManagerServer struct {
}

func (UnimplementedPassManagerServer) Register(context.Context, *Creds) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPassManagerServer) Login(context.Context, *Creds) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPassManagerServer) AddPassword(context.Context, *Password) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPassword not implemented")
}
func (UnimplementedPassManagerServer) GetPassword(context.Context, *GetPasswordRequest) (*Password, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedPassManagerServer) AddCard(context.Context, *Card) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedPassManagerServer) GetCard(context.Context, *GetCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedPassManagerServer) AddNote(context.Context, *Note) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (UnimplementedPassManagerServer) GetNote(context.Context, *GetNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (UnimplementedPassManagerServer) AddBytes(context.Context, *Bytes) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBytes not implemented")
}
func (UnimplementedPassManagerServer) GetBytes(context.Context, *GetBytesRequest) (*Bytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBytes not implemented")
}
func (UnimplementedPassManagerServer) mustEmbedUnimplementedPassManagerServer() {}

// UnsafePassManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassManagerServer will
// result in compilation errors.
type UnsafePassManagerServer interface {
	mustEmbedUnimplementedPassManagerServer()
}

func RegisterPassManagerServer(s grpc.ServiceRegistrar, srv PassManagerServer) {
	s.RegisterService(&PassManager_ServiceDesc, srv)
}

func _PassManager_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Creds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).Register(ctx, req.(*Creds))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManager_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Creds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).Login(ctx, req.(*Creds))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManager_AddPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Password)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).AddPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_AddPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).AddPassword(ctx, req.(*Password))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManager_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).GetPassword(ctx, req.(*GetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManager_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).AddCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManager_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).GetCard(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManager_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_AddNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).AddNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManager_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_GetNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).GetNote(ctx, req.(*GetNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManager_AddBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).AddBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_AddBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).AddBytes(ctx, req.(*Bytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassManager_GetBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassManagerServer).GetBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PassManager_GetBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassManagerServer).GetBytes(ctx, req.(*GetBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PassManager_ServiceDesc is the grpc.ServiceDesc for PassManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PassManager",
	HandlerType: (*PassManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PassManager_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PassManager_Login_Handler,
		},
		{
			MethodName: "AddPassword",
			Handler:    _PassManager_AddPassword_Handler,
		},
		{
			MethodName: "GetPassword",
			Handler:    _PassManager_GetPassword_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _PassManager_AddCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _PassManager_GetCard_Handler,
		},
		{
			MethodName: "AddNote",
			Handler:    _PassManager_AddNote_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _PassManager_GetNote_Handler,
		},
		{
			MethodName: "AddBytes",
			Handler:    _PassManager_AddBytes_Handler,
		},
		{
			MethodName: "GetBytes",
			Handler:    _PassManager_GetBytes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pass_manager.proto",
}
